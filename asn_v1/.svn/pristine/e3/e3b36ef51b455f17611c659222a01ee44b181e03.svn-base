package com.lonar.asn.dao;

import java.util.Date;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.lonar.asn.model.AttachmentDTO;
import com.lonar.asn.model.BusinessException;
import com.lonar.asn.model.LtShipmentAttachment;

@Repository
public class LtShipmentAttachmentDaoImpl implements LtShipmentAttachmentDao{

	
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	public void setDataSource(DataSource dataSource)
	{
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}
	
	private JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}
	
	@Override
	public List<LtShipmentAttachment> getAllFilesByShipmentHeaderId(Long asnHeaderId) throws BusinessException {
		String query = " SELECT * FROM LT_SHIPMENT_ATTACHMENT WHERE SHIPMENT_HEADER_ID = ? AND ATTACHMENT_TYPE_ID IS NOT NULL ";
		List<LtShipmentAttachment> list=   jdbcTemplate.query(query, new Object[]{asnHeaderId}, 
					 new BeanPropertyRowMapper<LtShipmentAttachment>(LtShipmentAttachment.class)); 
		
			 return list;
	}

	@Override
	public boolean save(Long asnHeaderId, String fileName, String saveDirectory, Long userId, Date currDate,
			Long attachmentTypeId) throws BusinessException {
		int res=jdbcTemplate.update("INSERT INTO LT_SHIPMENT_ATTACHMENT  "
				+ "  (SHIPMENT_ATTACHMENT_ID, SHIPMENT_HEADER_ID, FILE_NAME, FILE_PATH, LAST_UPDATED_BY,LAST_UPDATE_DATE, ATTACHMENT_TYPE_ID)  "
				+ " VALUES (LT_SHIPMENT_ATTACHMENT_S.nextval, ?, ? ,?, ?, ?, ?) ",
				+  asnHeaderId,fileName,saveDirectory,userId, currDate, attachmentTypeId );		
		
		if(res!=0)
			return true;
		else
			return false;
	}

	@Override
	public boolean saveLineAttachment(Long asnHeaderId, String fileName, String saveDirectory, Long userId,
			Date currDate, String asnLineId) throws BusinessException {
		
		String query = " SELECT LT_MAST_INVOICE_ATTACHMENT_S.nextval FROM DUAL";
		String attachmentId  = (String)getJdbcTemplate().queryForObject(
				query, new Object[] {}, String.class);
		
		int res=jdbcTemplate.update("INSERT INTO LT_SHIPMENT_ATTACHMENT  "
				+ "  (SHIPMENT_ATTACHMENT_ID, SHIPMENT_HEADER_ID, FILE_NAME, FILE_PATH, LAST_UPDATED_BY,LAST_UPDATE_DATE, ATTACHMENT_TYPE_ID)  "
				+ " VALUES (?, ?, ? ,?, ?, ?, ?) ",attachmentId,
				+  asnHeaderId,fileName,saveDirectory,userId, currDate, null );		
		
		if(res!=0) {
			int res1=jdbcTemplate.update("UPDATE LT_SHIPMENT_LINES SET ATTACHMENT = ? WHERE SHIPMENT_LINE_ID = ? AND  SHIPMENT_HEADER_ID = ? "
					, attachmentId, asnLineId,asnHeaderId);	
			if(res1!=0) {
				return true;
				
			}else {
				return false;
			}
		}
		return false;
			
	}

	@Override
	public boolean deleteByID(String id) throws BusinessException {
		int res1=jdbcTemplate.update("DELETE FROM LT_SHIPMENT_ATTACHMENT  WHERE SHIPMENT_ATTACHMENT_ID = ? ", id);	
		if(res1!=0) {
			
			return true;
			
		}else {
			return false;
		}
	}

	@Override
	public AttachmentDTO getfilepathbylineid(String id) throws BusinessException {
		String sql =   " select  FILE_PATH, FILE_NAME   FROM LT_SHIPMENT_ATTACHMENT where  SHIPMENT_ATTACHMENT_ID =  "+
				" ( SELECT ATTACHMENT FROM LT_SHIPMENT_LINES WHERE SHIPMENT_LINE_ID = ?  ) ";
		
		List<AttachmentDTO> list=   jdbcTemplate.query(sql, new Object[]{ id}, 
				 new BeanPropertyRowMapper<AttachmentDTO>(AttachmentDTO.class));
		if(list.isEmpty()) {
			AttachmentDTO attachmentDTO = new AttachmentDTO();
			attachmentDTO.setFilePath("XX");
			return attachmentDTO;
		}
		else
			return list.get(0);
		
	}

}
