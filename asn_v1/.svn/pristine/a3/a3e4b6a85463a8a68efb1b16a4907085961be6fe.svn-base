package com.lonar.asn.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.jdo.annotations.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.lonar.asn.dao.AsnHeaderDao;
import com.lonar.asn.model.BusinessException;
import com.lonar.asn.model.CodeMaster;
import com.lonar.asn.model.LtPoShipment;
import com.lonar.asn.model.LtShipmentHeaders;
import com.lonar.asn.model.LtShipmentLines;
import com.lonar.asn.model.ProcedureCall;
import com.lonar.asn.model.ShipmenntSources;
import com.lonar.asn.model.Status;
import com.lonar.asn.model.SubmitAsn;
import com.lonar.asn.repository.LtShipmentHeadersRepository;
import com.lonar.asn.repository.LtShipmentLinesRepository;
import com.lonar.asn.repository.ShipmenntSourcesRepository;

@Service
public class AsnHeaderServiceImpl implements AsnHeaderService , CodeMaster{

	@Autowired
	AsnHeaderDao asnHeaderDao;
	
	@Autowired
	LtShipmentHeadersRepository ltShipmentHeadersRepository;
	
	@Autowired
	LtShipmentLinesRepository ltShipmentLinesRepository;
	
	@Autowired
	LtMastCommonMessageService ltMastCommonMessageService;
	
	@Autowired
	ShipmenntSourcesRepository shipmenntSourcesRepository;
	
	@Override
	public List<String> getListOfStr() throws BusinessException {
		return asnHeaderDao.getListOfStr();
	}

	@Override
	@Transactional
	public ResponseEntity<Status> updateAsnHeader(LtShipmentHeaders ltShipmentHeaders) throws BusinessException {
		Status status = new Status();
		ltShipmentHeaders.setCreatedBy(ltShipmentHeaders.getLastUpdateLogin());
		ltShipmentHeaders.setLastUpdatedBy(ltShipmentHeaders.getLastUpdateLogin());
		ltShipmentHeaders.setLastUpdateLogin(ltShipmentHeaders.getLastUpdateLogin());
		ltShipmentHeaders.setCreationDate(new Date());
		ltShipmentHeaders.setLastUpdateDate(new Date());
		ltShipmentHeaders = ltShipmentHeadersRepository.save(ltShipmentHeaders);
	    if(ltShipmentHeaders.getShipmentHeaderId()!=null)
		{
			status=ltMastCommonMessageService.getCodeAndMessage(UPDATE_SUCCESSFULLY);
			if( status.getMessage()==null) {
				status.setCode(SUCCESS);
				status.setMessage("Error in finding message! The action is completed successfully.");
			}
		}
		else
		{
			status=ltMastCommonMessageService.getCodeAndMessage(UPDATE_FAIL);
			if( status.getMessage()==null) {
				status.setCode(EXCEPTION);
				status.setMessage("Error in finding message! The action is completed unsuccessfully.");
			}
		}
	    return new ResponseEntity<Status>(status, HttpStatus.OK);
	}

	@Override
	@Transactional
	public ResponseEntity<Status> updateAsnLine(List<LtShipmentLines> listOfShipmentLines) throws BusinessException {
		Status status = new Status();
		for (LtShipmentLines ltShipmentLines : listOfShipmentLines) {
			
			/*if(asnHeaderDao.updateLines(ltShipmentLines)) {
				status=ltMastCommonMessageService.getCodeAndMessage(UPDATE_SUCCESSFULLY);
				if( status.getMessage()==null) {
					status.setCode(SUCCESS);
					status.setMessage("Error in finding message! The action is completed successfully.");
				}
			}else {
				status=ltMastCommonMessageService.getCodeAndMessage(UPDATE_FAIL);
				if( status.getMessage()==null) {
					status.setCode(EXCEPTION);
					status.setMessage("Error in finding message! The action is completed unsuccessfully.");
				}
			}*/
			
			LtShipmentLines ltShipmentLinesObj = ltShipmentLinesRepository.findOne(ltShipmentLines.getShipmentLineId());
			
			//ltShipmentLines.setCreatedBy(ltShipmentLines.getLastUpdateLogin());
			/*ltShipmentLines.setLastUpdatedBy(ltShipmentLines.getLastUpdateLogin());
			ltShipmentLines.setLastUpdateLogin(ltShipmentLines.getLastUpdateLogin());
			ltShipmentLines.setCreationDate(new Date());
			ltShipmentLines.setLastUpdateDate(new Date());*/
			ltShipmentLinesObj.setQuantityReceived(ltShipmentLines.getQuantityReceived());
			ltShipmentLinesObj.setQuantityShipped(ltShipmentLines.getQuantityShipped());
			updateRecivedQuantity(ltShipmentLinesObj);
		}
		status.setMessage("Data updated successfully");
		return new ResponseEntity<Status>(status, HttpStatus.OK);
	}

	@Transactional
	private void updateRecivedQuantity(LtShipmentLines ltShipmentLines) {
		ltShipmentLinesRepository.save(ltShipmentLines);
	}

	@Override
	public Long getAsnHeaderDataCount(LtShipmentHeaders input) throws BusinessException {
		return asnHeaderDao.getAsnHeaderDataCount(input);
	}

	@Override
	public List<LtShipmentHeaders> getAsnHeaderDataTableDetails(LtShipmentHeaders input) throws BusinessException {

		if(input.getColumnNo()==2 && input.getSort().equals("desc"))
		{
			input.setColumnNo(12);
		}
		if(input.getColumnNo()==3 && input.getSort().equals("desc"))
		{
			input.setColumnNo(13);
		}
		if(input.getColumnNo()==4 && input.getSort().equals("desc"))
		{
			input.setColumnNo(14);
		}
		if(input.getColumnNo()==5 && input.getSort().equals("desc"))
		{
			input.setColumnNo(15);
		}
		if(input.getColumnNo()==6 && input.getSort().equals("desc"))
		{
			input.setColumnNo(16);
		}
		return asnHeaderDao.getAsnHeaderDataTableDetails(input);
	}

	@Override
	public LtShipmentHeaders getByAsnHeaderId(Long id) throws BusinessException {
		return asnHeaderDao.getByAsnHeaderId(id);
	}

	@Override
	public List<LtShipmentLines> getAsnLinesByAsnHeaderId(Long id) throws BusinessException {
		return asnHeaderDao.getAsnLinesByAsnHeaderId(id);
	}

	@Override
	public Long getAsnHeaderDataCountByLocation(LtShipmentHeaders shipmentHeaders, Long locationId)
			throws BusinessException {
		return asnHeaderDao.getAsnHeaderDataCountByLocation(shipmentHeaders,locationId);
	}

	@Override
	public List<LtShipmentHeaders> getAsnHeaderDataTableDetailsByLocation(LtShipmentHeaders input,
			Long locationId) throws BusinessException {
		if(input.getColumnNo()==2 && input.getSort().equals("desc"))
		{
			input.setColumnNo(12);
		}
		if(input.getColumnNo()==3 && input.getSort().equals("desc"))
		{
			input.setColumnNo(13);
		}
		if(input.getColumnNo()==4 && input.getSort().equals("desc"))
		{
			input.setColumnNo(14);
		}
		if(input.getColumnNo()==5 && input.getSort().equals("desc"))
		{
			input.setColumnNo(15);
		}
		if(input.getColumnNo()==6 && input.getSort().equals("desc"))
		{
			input.setColumnNo(16);
		}
		if(input.getColumnNo()==7 && input.getSort().equals("asc"))
		{
			input.setColumnNo(17);
		}
		return asnHeaderDao.getAsnHeaderDataTableDetailsByLocation(input,locationId);
	}

	@Override
	public ResponseEntity<Status> deleteAsn(Long id) throws BusinessException {
		Status status = new Status();
		try {
		ltShipmentHeadersRepository.delete(id);
		if(!ltShipmentHeadersRepository.exists(id)) {
				status=ltMastCommonMessageService.getCodeAndMessage(DELETE_SUCCESSFULLY);
				if( status.getMessage()==null) {
					status.setCode(SUCCESS);
					status.setMessage("Error in finding message! The action is completed successfully.");
				}
		}else {
			status=ltMastCommonMessageService.getCodeAndMessage(DELETE_FAIL);
			if( status.getMessage()==null) {
				status.setCode(EXCEPTION);
				status.setMessage("Error in finding message! The action is completed unsuccessfully.");
			}
		}
		}catch(Exception e) {
			status=ltMastCommonMessageService.getCodeAndMessage(ENTITY_CANNOT_DELETE);
			if( status.getMessage()==null) {
				status.setCode(EXCEPTION);
				status.setMessage("Error in finding message! The action is completed unsuccessfully.");
			}
		}
		return new ResponseEntity<Status>(status, HttpStatus.OK);
	}

	@Override
	public ResponseEntity<Status> submitAsn(SubmitAsn submitAsn) throws BusinessException {
		Status status= new Status();
		//submitAsn.setStatus(status);
		if(asnHeaderDao.submitAsn(submitAsn)) {
			status=ltMastCommonMessageService.getCodeAndMessage(UPDATE_SUCCESSFULLY);
			if( status.getMessage()==null) {
				status.setCode(SUCCESS);
				status.setMessage("Error in finding message! The action is completed successfully.");
			}
		}else {
			status=ltMastCommonMessageService.getCodeAndMessage(UPDATE_FAIL);
			if( status.getMessage()==null) {
				status.setCode(EXCEPTION);
				status.setMessage("Error in finding message! The action is completed unsuccessfully.");
			}
		}
		System.out.println("status "+status);
	return new ResponseEntity<Status>(status, HttpStatus.OK);
	}

	@Override
	public SubmitAsn getAsnStatusByAsnHeaderId(Long id) throws BusinessException {
		return asnHeaderDao.getAsnStatusByAsnHeaderId(id);
	}

	@Override
	public Long getCountpoShipmentDataTableByVendorId(LtPoShipment poShipment, Long vendorId) throws BusinessException {
		return asnHeaderDao.getCountpoShipmentDataTableByVendorId(poShipment,vendorId);
	}

	@Override
	public List<LtPoShipment> getPoShipmentDataTableByVendorId(LtPoShipment input, Long vendorId)
			throws BusinessException {
		// TODO Auto-generated method stub
		if(input.getColumnNo()==2 && input.getSort().equals("desc"))
		{
			input.setColumnNo(12);
		}
		if(input.getColumnNo()==3 && input.getSort().equals("desc"))
		{
			input.setColumnNo(13);
		}
		if(input.getColumnNo()==4 && input.getSort().equals("desc"))
		{
			input.setColumnNo(14);
		}
		if(input.getColumnNo()==5 && input.getSort().equals("desc"))
		{
			input.setColumnNo(15);
		}
		if(input.getColumnNo()==6 && input.getSort().equals("desc"))
		{
			input.setColumnNo(16);
		}
		if(input.getColumnNo()==7 && input.getSort().equals("desc"))
		{
			input.setColumnNo(17);
		}
		if(input.getColumnNo()==8 && input.getSort().equals("desc"))
		{
			input.setColumnNo(18);
		}
		if(input.getColumnNo()==9 && input.getSort().equals("desc"))
		{
			input.setColumnNo(19);
		}
		return asnHeaderDao.getPoShipmentDataTableByVendorId(input,vendorId);
	}
	
	@Override
	public ResponseEntity<Status> saveShipmentSource(List<ShipmenntSources> shipmenntSources) throws BusinessException {
		Status status = new Status();
		Long sourcesId = asnHeaderDao.getShipmentSourceIds();
		List<ShipmenntSources> shipmenntSourcesUpdated = new ArrayList<>();
		
		for (Iterator iterator = shipmenntSources.iterator(); iterator.hasNext();) {
			ShipmenntSources shipmenntSources2 = (ShipmenntSources) iterator.next();
			
			System.out.println("getPoHeaderId "+ shipmenntSources2.getPoHeaderId() 
			+"getPoLineId "+ shipmenntSources2.getPoLineId() 
			+"PoShipmentId "+ shipmenntSources2.getPoShipmentId()
			+"getVendorId "+shipmenntSources2.getVendorId()
			+"getVendorAddId "+shipmenntSources2.getVendorAddId() );
			
			shipmenntSources2.setShipmentSourceId(sourcesId);
			shipmenntSources2.setCreationDate(new Date());
			shipmenntSources2.setLastUpdateDate(new Date());
			
			shipmenntSourcesUpdated.add(shipmenntSources2);
		}
		
		if(shipmenntSourcesUpdated.size() > 0) {
			saveShipmentSourceData(shipmenntSourcesUpdated);
			status.setMessage("Data inserted successfuly ");
			System.out.println("=====Data inserted successfuly========");
		}
		
		//call procedre for asn
		//lt_vpal_asn_pkg.create_asn(x_status ,x_message ,p_shipment_source_id);
		
		ProcedureCall procedureCall = asnHeaderDao.saveAsnHeaderAndLineData(sourcesId);
		status.setData(procedureCall.getShipmentHeaderId());
		
		return new ResponseEntity<Status>(status, HttpStatus.OK);
	}

	@Transactional
	private void saveShipmentSourceData(List<ShipmenntSources> shipmenntSourcesUpdated) {
		shipmenntSourcesRepository.save(shipmenntSourcesUpdated);
	}

	@Override
	public ResponseEntity<Status> deleteAsnLineAttachment(Long id) throws BusinessException 
	{
		Status status = new Status();
		if(asnHeaderDao.deleteAsnLineAttachment(id)) {
		status=ltMastCommonMessageService.getCodeAndMessage(DELETE_SUCCESSFULLY);
		if( status.getMessage()==null) {
		status.setCode(SUCCESS);
		status.setMessage("Error in finding message! The action is completed successfully.");
		}
		}else {
		status=ltMastCommonMessageService.getCodeAndMessage(DELETE_FAIL);
		if( status.getMessage()==null) {
		status.setCode(EXCEPTION);
		status.setMessage("Error in finding message! The action is completed unsuccessfully.");
		}
		}
		return new ResponseEntity<Status>(status, HttpStatus.OK);
	}

}
